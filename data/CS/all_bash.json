[{"question": "Run history number (e.g. 53)", "answer": "!53"}, {"question": "Run last command", "answer": "!!\n# run the previous command using sudo\nsudo !!"}, {"question": "Run past command that began with (e.g. cat filename)", "answer": "!cat\n# or\n!c\n# run cat filename again"}, {"question": "Get the length of variable", "answer": "var=\"some string\"\necho ${#var}\n# 11"}, {"question": "Get the first character of the variable", "answer": "var=string\necho \"${var:0:1}\"\n#s\n\n# or\necho ${var%%\"${var#?}\"}"}, {"question": "Remove the first or last string from variable", "answer": "var=\"some string\"\necho ${var:2}\n#me string"}, {"question": "Replacement (e.g. remove the first leading 0 )", "answer": "var=\"0050\"\necho ${var[@]#0}\n#050"}, {"question": "Replacement (e.g. replace 'a' with ',')", "answer": "{var/a/,}"}, {"question": "Replace all (e.g. replace all 'a' with ',')", "answer": "{var//a/,}"}, {"question": "To change the case of the string stored in the variable to lowercase (Parameter Expansion)", "answer": "var=HelloWorld\necho ${var,,}\nhelloworld"}, {"question": "Expand and then execute variable/argument", "answer": "cmd=\"bar=foo\"\neval \"$cmd\"\necho \"$bar\" # foo"}, {"question": "Print out the prime factors of a number (e.g. 50)", "answer": "factor 50\n# 50: 2 5 5"}, {"question": "Sum up input list (e.g. seq 10)", "answer": "seq 10|paste -sd+|bc"}, {"question": "Sum up a file (each line in file contains only one number)", "answer": "awk '{s+=$1} END {print s}' filename"}, {"question": "Column subtraction", "answer": "cat file| awk -F '\\t' 'BEGIN {SUM=0}{SUM+=$3-$2}END{print SUM}'"}, {"question": "Simple math with expr", "answer": "expr 10+20 #30\nexpr 10\\*20 #600\nexpr 30 \\> 20 #1 (true)"}, {"question": " Grep and count number of empty lines", "answer": "grep -c \"^$\""}, {"question": " Grep and return only integer", "answer": "grep -o '[0-9]*'\n#or\ngrep -oP '\\d*'"}, {"question": " Grep integer with certain number of digits (e.g. 3)", "answer": "grep '[0-9]\\{3\\}'\n# or\ngrep -E '[0-9]{3}'\n# or\ngrep -P '\\d{3}'"}, {"question": " Grep whole word (e.g. 'target')", "answer": "grep -w 'target'\n\n#or using RE\ngrep '\\btarget\\b'"}, {"question": " Grep string starting with (e.g. 'S')", "answer": "grep -o 'S.*'"}, {"question": "Extract text between words (e.g. w1,w2)", "answer": "grep -o -P '(?<=w1).*(?=w2)'"}, {"question": "Grep lines without word (e.g. 'bbo')", "answer": "grep -v bbo filename"}, {"question": "Grep lines not begin with string (e.g. #)", "answer": "grep -v '^#' file.txt"}, {"question": "Grep variables with space within it (e.g. myvar=\"some strings\")", "answer": "grep \"$myvar\" filename\n#remember to quote the variable!"}, {"question": "Grep only one/first match (e.g. 'bbo')", "answer": "grep -m 1 bbo filename"}, {"question": "Grep and return number of matching line(e.g. 'bbo')", "answer": "grep -c bbo filename"}, {"question": "Count occurrence (e.g. three times a line count three times)", "answer": "grep -o bbo filename |wc -l"}, {"question": "Case insensitive grep (e.g. 'bbo'/'BBO'/'Bbo')", "answer": "grep -i \"bbo\" filename"}, {"question": "COLOR the match (e.g. 'bbo')!", "answer": "grep --color bbo filename"}, {"question": "Grep search all files in a directory(e.g. 'bbo')", "answer": "grep -R bbo /path/to/directory\n# or\ngrep -r bbo /path/to/directory"}, {"question": "Search all files in directory, do not ouput the filenames (e.g. 'bbo')", "answer": "grep -rh bbo /path/to/directory"}, {"question": "Search all files in directory, output ONLY the filenames with matches(e.g. 'bbo')", "answer": "grep -rl bbo /path/to/directory"}, {"question": "Grep OR (e.g. A or B or C or D)", "answer": "grep 'A\\|B\\|C\\|D'"}, {"question": "Grep AND (e.g. A and B)", "answer": "grep 'A.*B'"}, {"question": "Regex any single character (e.g. ACB or AEB)", "answer": "grep 'A.B'"}, {"question": "Regex with or without a certain character (e.g. color or colour)", "answer": "grep 'colou\\?r'"}, {"question": "Grep all content of a fileA from fileB", "answer": "grep -f fileA fileB"}, {"question": "Grep a tab", "answer": "grep $'\\t'"}, {"question": "Grep strings between a bracket()", "answer": "grep -oP '\\(\\K[^\\)]+'"}, {"question": "Grep number of characters with known strings in between(e.g. AAEL000001-RA)", "answer": "grep -o -w \"\\w\\{10\\}\\-R\\w\\{1\\}\"\n# \\w word character [0-9a-zA-Z_] \\W not word character"}, {"question": "Skip directory (e.g. 'bbo')", "answer": "grep -d skip 'bbo' /path/to/files/*"}, {"question": "Remove the 1st line", "answer": "sed 1d filename"}, {"question": "Remove the first 100 lines (remove line 1-100)", "answer": "sed 1,100d filename"}, {"question": "Remove lines with string (e.g. 'bbo')", "answer": "sed \"/bbo/d\" filename\n# case insensitive:\nsed \"/bbo/Id\" filename"}, {"question": "Remove lines whose nth character not equal to a value (e.g. 5th character not equal to 2)", "answer": "sed -E '/^.{5}[^2]/d'\n#aaaa2aaa (you can stay)\n#aaaa1aaa (delete!)"}, {"question": "Edit infile (edit and save to file), (e.g. deleting the lines with 'bbo' and save to file)", "answer": "sed -i \"/bbo/d\" filename"}, {"question": "Delete/remove empty lines", "answer": "sed '/^\\s*$/d'\n\n# or\n\nsed '/^$/d'"}, {"question": "Delete/remove last line", "answer": "sed '$d'"}, {"question": "Delete/remove last character from end of file", "answer": "sed -i '$ s/.$//' filename"}, {"question": "Add string to beginning of file (e.g. \"\\[\")", "answer": "sed -i '1s/^/[/' file"}, {"question": "Add string at certain line number (e.g. add 'something' to line 1 and line 3)", "answer": "sed -e '1isomething' -e '3isomething'"}, {"question": "Add string to end of file (e.g. \"]\")", "answer": "sed '$s/$/]/' filename"}, {"question": "Add newline to the end", "answer": "sed '$a\\'"}, {"question": "Add string to beginning of every line (e.g. 'bbo')", "answer": "sed -e 's/^/bbo/' filename"}, {"question": "Add string to end of each line (e.g. \"}\")", "answer": "sed -e 's/$/\\}\\]/' filename"}, {"question": "Add \\n every nth character (e.g. every 4th character)", "answer": "sed 's/.\\{4\\}/&\\n/g'"}, {"question": "Add a line after the line that matches the pattern (e.g. add a new line with \"world\" after the line with \"hello\")", "answer": "sed '/hello*/a world' filename\n# hello\n# world"}, {"question": "Concatenate/combine/join files with a separator and next line (e.g separate by \",\")", "answer": "sed -s '$a,' *.json > all.json"}, {"question": "Substitution (e.g. replace A by B)", "answer": "sed 's/A/B/g' filename"}, {"question": "Substitution with wildcard (e.g. replace a line start with aaa= by aaa=/my/new/path)", "answer": "sed \"s/aaa=.*/aaa=\\/my\\/new\\/path/g\""}, {"question": "Select lines start with string (e.g. 'bbo')", "answer": "sed -n '/^@S/p'"}, {"question": "Delete lines with string (e.g. 'bbo')", "answer": "sed '/bbo/d' filename"}, {"question": "Print/get/trim a range of line (e.g. line 500-5000)", "answer": "sed -n 500,5000p filename"}, {"question": "Print every nth lines", "answer": "sed -n '0~3p' filename\n\n# catch 0: start; 3: step"}, {"question": "Print every odd # lines", "answer": "sed -n '1~2p'"}, {"question": "Print every third line including the first line", "answer": "sed -n '1p;0~3p'"}, {"question": "Remove leading whitespace and tabs", "answer": "sed -e 's/^[ \\t]*//'\n# Notice a whitespace before '\\t'!!"}, {"question": "Remove only leading whitespace", "answer": "sed 's/ *//'\n\n# notice a whitespace before '*'!!"}, {"question": "Remove ending commas", "answer": "sed 's/,$//g'"}, {"question": "Add extension of filename to last column", "answer": "for i in T000086_1.02.n T000086_1.02.p; do sed \"s/$/\\t${i/*./}/\" $i; done >T000086_1.02.np"}, {"question": "Remove newline\\ nextline", "answer": "sed ':a;N;$!ba;s/\\n//g'"}, {"question": "Print a particular line (e.g. 123th line)", "answer": "sed -n -e '123p'"}, {"question": "Print a number of lines (e.g. line 10th to line 33 rd)", "answer": "sed -n '10,33p' <filename"}, {"question": "Change delimiter", "answer": "sed 's=/=\\\\/=g'"}, {"question": "Replace with wildcard (e.g A-1-e or A-2-e or A-3-e....)", "answer": "sed 's/A-.*-e//g' filename"}, {"question": "Remove last character of file", "answer": "sed '$ s/.$//'"}, {"question": "Insert character at specified position of file (e.g. AAAAAA --> AAA#AAA)", "answer": "sed -r -e 's/^.{3}/&#/' file"}, {"question": "Set tab as field separator", "answer": "awk -F $'\\t'"}, {"question": "Output as tab separated (also as field separator)", "answer": "awk -v OFS='\\t'"}, {"question": "Pass variable", "answer": "a=bbo;b=obb;\nawk -v a=\"$a\" -v b=\"$b\" \"$1==a && $10=b\" filename"}, {"question": "Print line number and number of characters on each line", "answer": "awk '{print NR,length($0);}' filename"}, {"question": "Find number of columns", "answer": "awk '{print NF}'"}, {"question": "Reverse column order", "answer": "awk '{print $2, $1}'"}, {"question": "Check if there is a comma in a column (e.g. column $1)", "answer": "awk '$1~/,/ {print}'"}, {"question": "Split and do for loop", "answer": "awk '{split($2, a,\",\");for (i in a) print $1\"\\t\"a[i]}' filename"}, {"question": "Print all lines before nth occurrence of a string (e.g stop print lines when 'bbo' appears 7 times)", "answer": "awk -v N=7 '{print}/bbo/&& --N<=0 {exit}'"}, {"question": "Print filename and last line of all files in directory", "answer": "ls|xargs -n1 -I file awk '{s=$0};END{print FILENAME,s}' file"}, {"question": "Add string to the beginning of a column (e.g add \"chr\" to column $3)", "answer": "awk 'BEGIN{OFS=\"\\t\"}$3=\"chr\"$3'"}, {"question": "Remove lines with string (e.g. 'bbo')", "answer": "awk '!/bbo/' file"}, {"question": "Remove last column", "answer": "awk 'NF{NF-=1};1' file"}, {"question": "Give number/index to every row", "answer": "awk '{printf(\"%s\\t%s\\n\",NR,$0)}'"}, {"question": "Average a file (each line in file contains only one number)", "answer": "awk '{s+=$1}END{print s/NR}'"}, {"question": "Print field start with string (e.g Linux)", "answer": "awk '$1 ~ /^Linux/'"}, {"question": "Subtract previous row values (add column6 which equal to column4 minus last column5)", "answer": "awk '{$6 = $4 - prev5; prev5 = $5; print;}'"}, {"question": "Set tab as delimiter (default:space)", "answer": "xargs -d\\t"}, {"question": "Prompt commands before running commands. Use ls as example.", "answer": "ls|xargs -L1 -p head"}, {"question": "Display 3 items per line", "answer": "echo 1 2 3 4 5 6| xargs -n 3\n# 1 2 3\n# 4 5 6"}, {"question": "Prompt before execution", "answer": "echo a b c |xargs -p -n 3"}, {"question": "Print command along with output", "answer": "xargs -t abcd\n# bin/echo abcd\n# abcd"}, {"question": "With find and rm", "answer": "find . -name \"*.html\"|xargs rm\n\n# when using a backtick\nrm `find . -name \"*.html\"`"}, {"question": "Delete files with whitespace in filename (e.g. \"hello 2001\")", "answer": "find . -name \"*.c\" -print0|xargs -0 rm -rf"}, {"question": "Move first 100th files to a directory (e.g. d1)", "answer": "ls |head -100|xargs -I {} mv {} d1"}, {"question": "Parallel", "answer": "time echo {1..5} |xargs -n 1 -P 5 sleep\n\n# a lot faster than:\ntime echo {1..5} |xargs -n1 sleep"}, {"question": "With sed", "answer": "ls |xargs -n1 -I file sed -i '/^Pos/d' file"}, {"question": "Add the file name to the first line of file", "answer": "ls |sed 's/.txt//g'|xargs -n1 -I file sed -i -e '1 i\\>file\\' file.txt"}, {"question": "Count all files", "answer": "ls |xargs -n1 wc -l"}, {"question": "Turn output into a single line", "answer": "ls -l| xargs"}, {"question": "Count lines in all file, also count total lines", "answer": "ls|xargs wc -l"}, {"question": "Xargs and grep", "answer": "cat grep_list |xargs -I{} grep {} filename"}, {"question": "Xargs and sed (replace all old ip address with new ip address under /etc directory)", "answer": "grep -rl '192.168.1.111' /etc | xargs sed -i 's/192.168.1.111/192.168.2.111/g'"}, {"question": "List all sub directory/file in the current directory", "answer": "find ."}, {"question": "List all files under the current directory", "answer": "find . -type f"}, {"question": "List all directories under the current directory", "answer": "find . -type d"}, {"question": "Find and output only filename (e.g. \"mso\")", "answer": "find mso*/ -name M* -printf \"%f\\n\""}, {"question": "Find large files in the system (e.g. >4G)", "answer": "find / -type f -size +4G"}, {"question": "Find and delete file with size less than (e.g. 74 byte)", "answer": "find . -name \"*.mso\" -size -74c -delete\n\n# M for MB, etc"}, {"question": "Find empty (0 byte) files", "answer": "find . -type f -empty\n# to further delete all the empty files\nfind . -type f -empty -delete"}, {"question": "Recursively count all the files in a directory", "answer": "find . -type f | wc -l"}, {"question": "Find out the time require for executing a command", "answer": "time echo hi"}, {"question": "Wait for some time (e.g 10s)", "answer": "sleep 10"}, {"question": "wait for random duration (e.g. sleep 1-5 second, like adding a jitter)", "answer": "sleep $[ ( $RANDOM % 5 ) + 1 ]"}, {"question": "Log out your account after a certain period of time (e.g 10 seconds)", "answer": "TMOUT=10\n#once you set this variable, logout timer start running!"}, {"question": "Set how long you want to run a command", "answer": "#This will run the command 'sleep 10' for only 1 second.\ntimeout 1 sleep 10"}, {"question": "Wget to a filename (when a long name)", "answer": "wget -O filename \"http://example.com\""}, {"question": "Wget files to a folder", "answer": "wget -P /path/to/directory \"http://example.com\""}, {"question": "Instruct curl to follow any redirect until it reaches the final destination:", "answer": "curl -L google.com"}, {"question": "Random pick 100 lines from a file", "answer": "shuf -n 100 filename"}, {"question": "Random order (lucky draw)", "answer": "for i in a b c d e; do echo $i; done | shuf"}, {"question": "Echo series of random numbers between a range (e.g. shuffle numbers from 0-100, then pick 15 of them randomly)", "answer": "shuf -i 0-100 -n 15"}, {"question": "Echo a random number", "answer": "echo $RANDOM"}, {"question": "Random from 0-9", "answer": "echo $((RANDOM % 10))"}, {"question": "Random from 1-10", "answer": "echo $(((RANDOM %10)+1))"}, {"question": "Little xwindow tools", "answer": "xclock\nxeyes\nxcowsay"}, {"question": "Open pictures/images from ssh server", "answer": "1. ssh -X user_name@ip_address\n2. apt-get install eog\n3. eog picture.png"}, {"question": "Watch videos on server", "answer": "1. ssh -X user_name@ip_address\n2. sudo apt install mpv\n3. mpv myvideo.mp4"}, {"question": "Use gedit on server (GUI editor)", "answer": "1. ssh -X user_name@ip_address\n2. apt-get install gedit\n3. gedit filename.txt"}, {"question": "Open PDF file from ssh server", "answer": "1. ssh -X user_name@ip_address\n2. apt-get install evince\n3. evince filename.pdf"}, {"question": "Audit files to see who made changes to a file [RedHat based system only]", "answer": "auditctl -w /path/to/myproject/ -p wa"}, {"question": "Check out whether SELinux is enabled", "answer": "sestatus"}, {"question": "Generate public key from private key", "answer": "ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub"}, {"question": "Copy your default public key to remote user", "answer": "ssh-copy-id <user_name>@<server_IP>"}, {"question": "Copy default public key to remote user using the required private key (e.g. use your mykey.pem key to copy your id_rsa.pub to the remote user)", "answer": "# before you need to use mykey.pem to ssh to remote user. ssh-copy-id -i ~/.ssh/id_rsa.pub -o 'IdentityFile ~/Downloads/mykey.pem' <user_name>@<server_IP> # now you don't need to use key to ssh to that user."}, {"question": "SSH Agent Forwarding", "answer": "ssh-agent; ssh-add (/path/to/mykey.pem); ssh -A <user_name>@<server_IP>; ssh <user_name>@<server_IP>"}, {"question": "Set the default user and key for a host when using SSH", "answer": "Add to ~/.ssh/config: `Host myserver\n  User myuser\n   IdentityFile ~/.ssh/mykey.pem`"}, {"question": "Follow the most recent logs from service", "answer": "journalctl -u <service_name> -f"}, {"question": "Eliminate the zombie", "answer": "ps aux | grep 'Z'; pstree -p -s <zombie_PID>; sudo kill -9 <zombie_PID>"}, {"question": "Eliminate the zombie", "answer": "###### Show memory usage"}, {"question": "Display CPU and IO statistics for devices and partitions.", "answer": "iostat -x -t 1"}, {"question": "Display bandwidth usage on an network interface (e.g. enp175s0f0)", "answer": "iftop -i enp175s0f0"}, {"question": "Tell how long the system has been running and number of users", "answer": "uptime"}, {"question": "Check if it's root running", "answer": "if [ '$EUID' -ne 0 ]; then echo \"You must be root to do this.\"; exit 1; fi. Note, EUID should be in double quotes."}, {"question": "Change shell of a user (e.g. bonnie)", "answer": "chsh -s /bin/bash bonnie"}, {"question": "Change root / fake root / jail (e.g. change root to newroot)", "answer": "chroot /home/newroot /bin/bash"}, {"question": "Display file status (size; access, modify and change time, etc) of a file (e.g. filename.txt)", "answer": "stat filename.txt"}, {"question": "Snapshot of the current processes", "answer": "ps aux"}, {"question": "Display a tree of processes", "answer": "pstree"}, {"question": "Find maximum number of processes", "answer": "cat /proc/sys/kernel/pid_max"}, {"question": "Print or control the kernel ring buffer", "answer": "dmesg"}, {"question": "Show IP address", "answer": "${ip} add show"}, {"question": "Print previous and current SysV runlevel", "answer": "runlevel; (or) who -r"}, {"question": "Change SysV runlevel (e.g. 5)", "answer": "init 5 (or) telinit 5"}, {"question": "Display all available services in all runlevels,", "answer": "chkconfig --list"}, {"question": "Check system version", "answer": "cat /etc/*release"}, {"question": "Linux Programmer's Manuel: hier- description of the filesystem hierarchy", "answer": "man hier"}, {"question": "check the status of a cron service", "answer": "systemctl status crond.service"}, {"question": "stop cron service", "answer": "systemctl stop crond.service"}, {"question": "List job", "answer": "jobs -l"}, {"question": "Run a program with modified priority (e.g. ./test.sh)", "answer": "nice -10 ./test.sh; nice values range from -20 (most favorable scheduling) to 19 (least favorable)."}, {"question": "what is the default niceness of a process started by a terminal command?", "answer": "10"}, {"question": "what is the default priority of a process started by a terminal command?", "answer": "80"}, {"question": "Export PATH", "answer": "export PATH+${PATH}:~/path/you/want"}, {"question": "Make file executable", "answer": "chmod +x filename"}, {"question": "Print system information", "answer": "uname -a; uname -i;"}, {"question": "Surf the net, e.g. google.com", "answer": "links www.google.com"}, {"question": "Add user, set passwd", "answer": "useradd username; passwd username"}, {"question": "Edit PS1 variable for bash (e.g. displaying the whole path)", "answer": "vim ~/.bash_profile; export PS1='\\u@\\h:\\w\\$'; (or, to add emojis + timestamp): export PS1='\t@\ud83e\udd81:\\w\\$ '; finally, source ~/.bash_profile. Note, double \\ should be replaced by single."}, {"question": "Edit environment setting (e.g. alias)", "answer": "vim ~/.bash_profile; alias lt='ls -laht'; source ~/.bash_profile"}, {"question": "Print all alias", "answer": "alias -p"}, {"question": "Unalias (e.g. after alias ls='ls --color=auto')", "answer": "unalias ls"}, {"question": "print all shell options", "answer": "shopt"}, {"question": "unset or stop alias", "answer": "shopt -u expand_aliases"}, {"question": "set or start alias", "answer": "shopt -s expand_aliases"}, {"question": "List environment variables (e.g. PATH)", "answer": "echo ${PATH}"}, {"question": "List all environment variables for current user", "answer": "env"}, {"question": "Unset environment variable (e.g. unset variable 'MYVAR')", "answer": "unset MYVAR"}, {"question": "Show partition format", "answer": "lsblk"}, {"question": "Inform the OS of partition table changes", "answer": "partprobe"}, {"question": "Soft link program to bin", "answer": "ln -s /path/to/program /home/usr/bin"}, {"question": "Show hexadecimal view of data", "answer": "hexdump -C filename"}, {"question": "Jump to different node", "answer": "rsh node_name"}, {"question": "Check port (active internet connection)", "answer": "netstat -tulpn"}, {"question": "Print resolved symbolic links or canonical file names", "answer": "readlink filename"}, {"question": "Find out the type of command and where it link to (e.g. python)", "answer": "type -f python"}, {"question": "List all functions names", "answer": "declare -F"}, {"question": "List total size of a directory", "answer": "du -hs .; (or) du -sb;"}, {"question": "Copy directory with permission setting", "answer": "cp -rp /path/to/source /path/to/destination"}, {"question": "Store current directory", "answer": "pushd .; (to pop) popd"}, {"question": "pop current directory", "answer": "popd"}, {"question": "display list of currently remembered dirs", "answer": "dirs -v; (or) dirs-l"}, {"question": "Show disk usage", "answer": "df -h; (or) du -h; (or) du -sk /var/log/* |sort -rn |head -10"}, {"question": "check the Inode utilization", "answer": "df -i"}, {"question": "Show all file system type", "answer": "df -TH"}, {"question": "Show current runlevel", "answer": "runlevel"}, {"question": "Switch runlevel", "answer": "init 3"}, {"question": "Permanently modify runlevel", "answer": "1. edit /etc/init/rc-sysinit.conf; 2. env DEFAULT_RUNLEVEL=3"}, {"question": "Become root", "answer": "su"}, {"question": "Become somebody", "answer": "su somebody"}, {"question": "Report user quotes on device", "answer": "repquota -auvs"}, {"question": "Get entries in a number of important databases", "answer": "getent database_name; (e.g. getent passwd); (or) getent group"}, {"question": "Change owner of file", "answer": "chown user_name filename; chown -R user_name /path/to/directory/"}, {"question": "Mount and unmount", "answer": "mount /dev/sdb /home/test; umount /dev/test"}, {"question": "List current mount detail", "answer": "mount (or) df"}, {"question": "List current usernames and user-numbers", "answer": "cat /etc/passwd"}, {"question": "Get all username", "answer": "getent passwd| awk '{FS='[:]'; print $1}'; note, brackets should be in double quotes"}, {"question": "Show all users", "answer": "compgen -u"}, {"question": "Show all groups", "answer": "compgen -g"}, {"question": "Show group of user", "answer": "group username"}, {"question": "Show uid, gid, group of user", "answer": "id username; (or) echo ${UID}"}, {"question": "Check if it's root", "answer": "if [ $(id -u) -ne 0 ]; then echo 'not root!' exit; fi;"}, {"question": "Find out CPU information", "answer": "more /proc/cpuinfo; (or) lscpu;"}, {"question": "Set quota for user (e.g. disk soft limit: 120586240; hard limit: 125829120)", "answer": "setquota username 120586240 125829120 0 0 /home"}, {"question": "Show quota for user", "answer": "quota -v username"}, {"question": "Display current libraries from the cache", "answer": "ldconfig -p"}, {"question": "Print shared library dependencies (e.g. for 'ls')", "answer": "ldd /bin/ls"}, {"question": "Check user login", "answer": "lastlog"}, {"question": "Check last reboot history", "answer": "last reboot"}, {"question": "Edit path for all users", "answer": "joe /etc/environment"}, {"question": "Show and set user limit", "answer": "ulimit -u"}, {"question": "Print out number of cores/ processors", "answer": "nproc --all"}, {"question": "Check status of each core", "answer": "top; 1;"}, {"question": "Show jobs and PID", "answer": "jobs -l"}, {"question": "List all running services", "answer": "service --status-all"}, {"question": "Schedule shutdown server", "answer": "shutdown -r +5 'Server will restart in 5 minutes. Please save your work.'"}, {"question": "Cancel scheduled shutdown", "answer": "shutdown -c"}, {"question": "Broadcast to all users", "answer": "wall -n hihi"}, {"question": "Kill all process of a user", "answer": "pkill -U user-name"}, {"question": "Kill all process of a program", "answer": "kill -9 $(ps aux | grep 'program_name' | awk '{print $2}')"}, {"question": "Install software to set gedit preference on server", "answer": "apt-get install libglib2.0-bin; (or) yum install dconf dconf-editor; yum install dbus dbus-xll;"}, {"question": "check list (gedit)", "answer": "gsettings list-recursively | grep gedit"}, {"question": "change some settings (gedit)", "answer": "gsettings set org.gnome.gedit.preferences.editor highlight-current-line true"}, {"question": "Add user to a group (e.g add user 'nice' to the group 'docker', so that he can run docker without sudo)", "answer": "sudo gpasswd -a nice docker"}, {"question": "Pip install python package without root", "answer": "1. posssibly run `export PATH=${PATH}:~/.local/bin` first; 2. pip install --user package_name"}, {"question": "Removing old linux kernels (when /boot almost full...)", "answer": "uname -a (check current kernel which should NOT be removed); sudo apt-get purge linux-image-X.X.X-X-generic;  (replace old version)"}, {"question": "Change hostname", "answer": "sudo hostname your-new-name; if not working, try: sudo hostnamectl set-hostname your-new-name; check with `hostnamectl` or `/etc/hostname`; if still not working, edit: /etc/sysconfig/network and or /etc/sysconfig/network-scripts/ifcfg-ensxxx (add HOSTNAME=...) "}, {"question": "List installed packages", "answer": "apt list --installed\n\n# or on Red Hat:\nyum list installed"}, {"question": "Check for package update", "answer": "apt list --upgradeable\n\n# or\nsudo yum check-update"}, {"question": "Run yum update excluding a package (e.g. do not update php packages)", "answer": "sudo yum update --exclude=php*"}, {"question": "Check which file make the device busy on umount", "answer": "lsof /mnt/dir"}, {"question": "When sound not working", "answer": "killall pulseaudio\n# then press Alt-F2 and type in pulseaudio"}, {"question": "List information about SCSI devices", "answer": "lsscsi"}, {"question": "Using telnet to test open ports, test if you can connect to a port (e.g 53) of a server (e.g 192.168.2.106)", "answer": "telnet 192.168.2.106 53"}, {"question": "Change network maximum transmission unit (mtu) (e.g. change to 9000)", "answer": "ifconfig eth0 mtu 9000"}, {"question": "Get pid of a running process (e.g python)", "answer": "pidof python\n\n# or\nps aux|grep python"}, {"question": "Check status of a process using PID", "answer": "ps -p <PID>\n\n#or\ncat /proc/<PID>/status\ncat /proc/<PID>/stack\ncat /proc/<PID>/stat"}, {"question": "NTP", "answer": "# Start ntp:\nntpd\n\n# Check ntp:\nntpq -p"}, {"question": "Create a UEFI Bootable USB drive (e.g. /dev/sdc1)", "answer": "sudo dd if=~/path/to/isofile.iso of=/dev/sdc1 oflag=direct bs=1048576"}, {"question": "Locate and remove a package", "answer": "sudo dpkg -l | grep <package_name>\nsudo dpkg --purge <package_name>"}, {"question": "Show a listing of last logged in users.", "answer": "lastb"}, {"question": "Show a listing of current logged in users, print information of them", "answer": "who"}, {"question": "Show who is logged on and what they are doing", "answer": "w"}, {"question": "Print the user names of users currently logged in to the current host.", "answer": "users"}, {"question": "Stop tailing a file on program terminate", "answer": "tail -f --pid=<PID> filename.txt\n# replace <PID> with the process ID of the program."}, {"question": "List all enabled services", "answer": "systemctl list-unit-files|grep enabled"}, {"question": "Finding Out memory device detail", "answer": "sudo dmidecode -t memory"}, {"question": "Count the number of Segate hard disks", "answer": "lsscsi|grep SEAGATE|wc -l\n# or\nsg_map -i -x|grep SEAGATE|wc -l"}, {"question": "Get UUID of a disk (e.g. sdb)", "answer": "lsblk -f /dev/sdb\n\n# or\nsudo blkid /dev/sdb"}, {"question": "Generate an UUID", "answer": "uuidgen"}, {"question": "List all PCI (Peripheral Component Interconnect) devices", "answer": "lspci\n# List information about NIC\nlspci | egrep -i --color 'network|ethernet'"}, {"question": "List all USB devices", "answer": "lsusb"}, {"question": "Resolve a domain to IP address(es)", "answer": "dig +short www.example.com\n\n# or\nhost www.example.com"}, {"question": "Get DNS TXT record a of domain", "answer": "dig -t txt www.example.com\n\n# or\nhost -t txt www.example.com"}, {"question": "Send a ping with a limited TTL to 10 (TTL: Time-To-Live, which is the maximum number of hops that a packet can travel across the Internet before it gets discarded.)", "answer": "ping 8.8.8.8 -t 10"}, {"question": "Print the route packets trace to network host", "answer": "traceroute google.com"}, {"question": "Look up website information (e.g. name server), searches for an object in a RFC 3912 database.", "answer": "whois google.com"}, {"question": "Show the SSL certificate of a domain", "answer": "openssl s_client -showcerts -connect www.example.com:443"}, {"question": "Display IP address", "answer": "ip a"}, {"question": "Display route table", "answer": "ip r"}, {"question": "Display ARP cache (ARP cache displays the MAC addresses of device in the same network that you have connected to)", "answer": "ip n"}, {"question": "Add transient IP addres (reset after reboot) (e.g. add 192.168.140.3/24 to device eno16777736)", "answer": "ip address add 192.168.140.3/24 dev eno16777736"}, {"question": "Refresh NetworkManager", "answer": "sudo nmcli c reload"}, {"question": "Restart all interfaces", "answer": "sudo systemctl restart network.service"}, {"question": "To view hostname, OS, kernal, architecture at the same time!", "answer": "hostnamectl"}, {"question": "Set hostname (set all transient, static, pretty hostname at once)", "answer": "hostnamectl set-hostname \"mynode\""}, {"question": "Find out the http status code of a URL", "answer": "curl -s -o /dev/null -w \"%{http_code}\" https://www.google.com"}, {"question": "Unshorten a shortended URL", "answer": "curl -s -o /dev/null -w \"%{redirect_url}\" https://bit.ly/34EFwWC"}, {"question": "Repeat printing string n times (e.g. print 'hello world' five times)", "answer": "printf 'hello world\\n%.0s' {1..5}"}, {"question": "Do not echo the trailing newline", "answer": "username=`echo -n \"bashoneliner\"`"}, {"question": "Copy a file to multiple files (e.g copy fileA to file(B-D))", "answer": "tee <fileA fileB fileC fileD >/dev/null"}, {"question": "Delete all non-printing characters", "answer": "tr -dc '[:print:]' < filename"}, {"question": "Remove newline / nextline", "answer": "tr --delete '\\n' <input.txt >output.txt"}, {"question": "Replace newline", "answer": "tr '\\n' ' ' <filename"}, {"question": "To uppercase/lowercase", "answer": "tr /a-z/ /A-Z/"}, {"question": "Translate a range of characters (e.g. substitute a-z into a)", "answer": "echo 'something' |tr a-z a\n# aaaaaaaaa"}, {"question": "Compare two files, strip trailing carriage return/ nextline (e.g. fileA, fileB)", "answer": "diff fileA fileB --strip-trailing-cr"}, {"question": "Combine/ paste two or more files into columns (e.g. fileA, fileB, fileC)", "answer": "paste fileA fileB fileC\n# default tab separate"}, {"question": "Fastq to fasta (fastq and fasta are common file formats for bioinformatics sequence data)", "answer": "cat file.fastq | paste - - - - | sed 's/^@/>/g'| cut -f1-2 | tr '\\t' '\\n' >file.fa"}, {"question": "Reverse string", "answer": "echo 12345| rev"}, {"question": "Generate sequence 1-10", "answer": "seq 10"}, {"question": "Find average of input list/file of integers", "answer": "i=`wc -l filename|cut -d ' ' -f1`; cat filename| echo \"scale=2;(`paste -sd+`)/\"$i|bc"}, {"question": "Generate all combination (e.g. 1,2)", "answer": "echo {1,2}{1,2}\n# 1 1, 1 2, 2 1, 2 2"}, {"question": "Read file content to variable", "answer": "foo=$(<test1)"}, {"question": "Echo size of variable", "answer": "echo ${#foo}"}, {"question": "Echo a tab", "answer": "echo -e ' \\t '"}, {"question": "Rename all files (e.g. remove ABC from all .gz files)", "answer": "rename 's/ABC//' *.gz"}, {"question": "Remove file extension (e.g remove .gz from filename.gz)", "answer": "basename filename.gz .gz\n\nzcat filename.gz> $(basename filename.gz .gz).unpacked"}, {"question": "Squeeze repeat patterns (e.g. /t/t --> /t)", "answer": "tr -s \"/t\" < filename"}, {"question": "Do not print nextline with echo", "answer": "echo -e 'text here \\c'"}, {"question": "View first 50 characters of file", "answer": "head -c 50 file"}, {"question": "Cut and get last column of a file", "answer": "cat file|rev | cut -d/ -f1 | rev"}, {"question": "Add one to variable/increment/ i++ a numeric variable (e.g. $var)", "answer": "((var++))\n# or\nvar=$((var+1))"}, {"question": "Cut the last column", "answer": "cat filename|rev|cut -f1|rev"}, {"question": "Clear the contents of a file (e.g. filename)", "answer": ">filename"}, {"question": "Append to file (e.g. hihi)", "answer": "echo 'hihi' >>filename"}, {"question": "Wrap each input line to fit in specified width (e.g 4 integers per line)", "answer": "echo \"00110010101110001101\" | fold -w4\n# 0011\n# 0010\n# 1011\n# 1000\n# 1101"}, {"question": "Sort a file by column and keep the original order", "answer": "sort -k3,3 -s"}, {"question": "Right align a column (right align the 2nd column)", "answer": "cat file.txt|rev|column -t|rev"}, {"question": "To both view and store the output", "answer": "echo 'hihihihi' | tee outputfile.txt\n# use '-a' with tee to append to file."}, {"question": "Show non-printing (Ctrl) characters with cat", "answer": "cat -v filename"}, {"question": "Convert tab to space", "answer": "expand filename"}, {"question": "Convert space to tab", "answer": "unexpand filename"}, {"question": "Display file in octal ( you can also use od to display hexadecimal, decimal, etc)", "answer": "od filename"}, {"question": "Reverse cat a file", "answer": "tac filename"}, {"question": "Reverse the result from `uniq -c`", "answer": "while read a b; do yes $b |head -n $a ; done <test.txt"}, {"question": "Describe the format and characteristics of image files.", "answer": "identify myimage.png\n#myimage.png PNG 1049x747 1049x747+0+0 8-bit sRGB 1.006MB 0.000u 0:00.000"}, {"question": "Convert the hexadecimal MD5 checksum value into its base64-encoded format.", "answer": "openssl md5 -binary /path/to/file| base64\n# NWbeOpeQbtuY0ATWuUeumw=="}, {"question": "Forces applications to use the default language for output", "answer": "export LC_ALL=C\n\n# to revert:\nunset LC_ALL"}, {"question": "Encode strings as Base64 strings", "answer": "echo test|base64\n#dGVzdAo="}, {"question": "Get parent directory of current directory", "answer": "dirname `pwd`"}, {"question": "Read .gz file without extracting", "answer": "zmore filename\n\n# or\nzless filename"}, {"question": "Run multiple commands in background", "answer": "# run sequentially\n(sleep 2; sleep 3) &\n\n# run parallelly\nsleep 2 & sleep 3 &"}, {"question": "Run process even when logout (immune to hangups, with output to a non-tty)", "answer": "# e.g. Run myscript.sh even when log out.\nnohup bash myscript.sh"}, {"question": "Convert .xls to csv", "answer": "xls2csv filename"}, {"question": "Make BEEP sound", "answer": "speaker-test -t sine -f 1000 -l1"}, {"question": "Set beep duration", "answer": "(speaker-test -t sine -f 1000) & pid=$!;sleep 0.1s;kill -9 $pid"}, {"question": "Editing your history", "answer": "history -w\nvi ~/.bash_history\nhistory -r\n\n#or\nhistory -d [line_number]"}, {"question": "Delete current bash command", "answer": "Ctrl+U\n\n# or\nCtrl+C\n\n# or\nAlt+Shift+#\n# to make it to history"}, {"question": "Add something to history (e.g. \"addmetohistory\")", "answer": "# addmetodistory\n# just add a \"#\" before~~"}, {"question": "Get last history/record filename", "answer": "head !$"}, {"question": "Clean screen", "answer": "clear\n# or simply Ctrl+l"}, {"question": "Create a temporary directory and `cd` into it", "answer": "cd $(mktemp -d)\n# for example, this will create a temporary directory \"/tmp/tmp.TivmPLUXFT\""}, {"question": "Run command only if another command returns zero exit status (well done)", "answer": "cd tmp/ && tar xvf ~/a.tar"}, {"question": "Run command only if another command returns non-zero exit status (not finish)", "answer": "cd tmp/a/b/c ||mkdir -p tmp/a/b/c"}, {"question": "Use backslash \"\\\" to break long command", "answer": "cd tmp/a/b/c \\\n> || \\\n>mkdir -p tmp/a/b/c"}, {"question": "List file type of file (e.g. /tmp/)", "answer": "file /tmp/\n# tmp/: directory"}, {"question": "Writing Bash script ('#!'' is called shebang )", "answer": "#!/bin/bash\nfile=${1#*.}\n# remove string before a \".\""}, {"question": "Python simple HTTP Server", "answer": "python -m SimpleHTTPServer\n# or when using python3:\npython3 -m http.server"}, {"question": "Read user input", "answer": "read input\necho $input"}, {"question": "Array", "answer": "declare -a array=()\n\n# or\ndeclare array=()\n\n# or associative array\ndeclare -A array=()"}, {"question": "Send a directory", "answer": "scp -r directoryname user@ip:/path/to/send"}, {"question": "Use the last argument", "answer": "!$"}, {"question": "Check last exit code", "answer": "echo $?"}, {"question": "Extract .xz", "answer": "unxz filename.tar.xz\n# then\ntar -xf filename.tar"}, {"question": "Unzip tar.bz2 file (e.g. file.tar.bz2)", "answer": "tar xvfj file.tar.bz2"}, {"question": "Unzip tar.xz file (e.g. file.tar.xz)", "answer": "unxz file.tar.xz\ntar xopf file.tar"}, {"question": "Extract to a path", "answer": "tar xvf -C /path/to/directory filename.gz"}, {"question": "Create large dummy file of certain size instantly (e.g. 10GiB)", "answer": "fallocate -l 10G 10Gigfile"}, {"question": "Keep /repeatedly executing the same command (e.g Repeat 'wc -l filename' every 1 second)", "answer": "watch -n 1 wc -l filename"}, {"question": "Print commands and their arguments when execute (e.g. echo `expr 10 + 20 `)", "answer": "set -x; echo `expr 10 + 20 `\n# or\nset -o xtrace; echo `expr 10 + 20 `\n\n# to turn it off..\nset +x"}, {"question": "Print some meaningful sentences to you (install fortune first)", "answer": "fortune"}, {"question": "Colorful (and useful) version of top (install htop first)", "answer": "htop"}, {"question": "Press any key to continue", "answer": "read -rsp $'Press any key to continue...\\n' -n1 key"}, {"question": "Pass password to ssh", "answer": "sshpass -p mypassword ssh root@10.102.14.88 \"df -h\""}, {"question": "Convert pdf to txt", "answer": "sudo apt-get install poppler-utils\npdftotext example.pdf example.txt"}, {"question": "List only directory", "answer": "ls -d */"}, {"question": "List one file per line.", "answer": "ls -1\n# or list all, do not ignore entries starting with .\nls -1a"}, {"answer": "Ctrl + a", "question": "move to the beginning of line."}, {"answer": "Ctrl + d", "question": "if you've type something, Ctrl + (?) deletes the character under the cursor, else, it escapes the current shell"}, {"answer": "Ctrl + e", "question": "move to the end of line."}, {"answer": "Ctrl + k", "question": "delete all text from the cursor to the end of line."}, {"answer": "Ctrl + l", "question": "equivalent to clear."}, {"answer": "Ctrl + n", "question": "same as Down arrow."}, {"answer": "Ctrl + p", "question": "same as Up arrow."}, {"answer": "Ctrl + q", "question": "to resume output to terminal after Ctrl + s."}, {"answer": "Ctrl + r", "question": "Ctrl + (?) begins a backward search through command history.(keep pressing to move backward)"}, {"answer": "Ctrl + s", "question": "to stop output to terminal."}, {"answer": "Ctrl + t", "question": "Transpose the character before the cursor with the one under the cursor"}, {"question": "Transpose the word before the cursor with the one under the cursor", "answer": "Esc + t"}, {"answer": "Ctrl + u", "question": "cut the line before the cursor; then Ctrl + y paste it"}, {"answer": "Ctrl + w", "question": "cut the word before the cursor; then Ctrl + y paste it"}, {"answer": "Ctrl + x + backspace", "question": "delete all text from the beginning of line to the cursor."}, {"answer": "Ctrl + x + Ctrl + e", "question": "launch editor defined by $EDITOR to input your command. Useful for multi-line commands."}, {"answer": "Ctrl + z", "question": "stop current running process and keep it in background. You can use `fg` to continue the process in the foreground, or `bg` to continue the process in the background."}, {"answer": "Ctrl + _", "question": "undo typing."}, {"question": "Converts text from cursor to the end of the word to uppercase", "answer": "Esc + u"}, {"question": "Converts text from cursor to the end of the word to lowercase", "answer": "Esc + l"}, {"question": "Converts letter under the cursor to uppercase, rest of the word to lowercase", "answer": "Esc + c"}, {"question": "Run last command and change some parameter using caret substitution (e.g. last command: echo 'aaa' -> rerun as: echo 'bbb')", "answer": "#last command: echo 'aaa'\n^aaa^bbb\n\n#echo 'bbb'\n#bbb\n\n#Notice that only the first aaa will be replaced, if you want to replace all 'aaa', use ':&' to repeat it:\n^aaa^bbb^:&\n#or\n!!:gs/aaa/bbb/"}, {"question": "what serves as a wild card for filename expansion?", "answer": "/etc/pa*wd    #/etc/passwd"}, {"question": "what serves as a single-character wild card for filename expansion", "answer": "/b?n/?at      #/bin/cat"}, {"question": "what serves to match the character from a range", "answer": "ls -l [a-z]*   #list all files with alphabet in its filename"}, {"question": "What can be used to match filenames with more than one patterns", "answer": "ls *.{sh,py}   #list all .sh and .py files"}, {"question": "name of shell or shell script", "answer": "$0"}, {"question": "positional parameters", "answer": "$1, $2, $3, ..."}, {"question": "number of positional parameters", "answer": "$#"}, {"question": "most recent foreground pipeline exit status", "answer": "$?"}, {"question": "current options set for the shell", "answer": "$-"}, {"question": "pid of the current shell (not subshell)", "answer": "$$"}, {"question": "pid of the most recent background command", "answer": "$!"}, {"question": "last argument of the previously executed command, or the path of the bash script", "answer": "$_"}, {"question": "current display manager", "answer": "$DESKTOP_SESSION"}, {"question": "preferred text editor", "answer": "$EDITOR"}, {"question": "current language", "answer": "$LANG"}, {"question": "list of directories to search for executable files (i.e. ready-to-run programs)", "answer": "$PATH"}, {"question": "current directory", "answer": "$PWD"}, {"question": "current shell", "answer": "$SHELL"}, {"question": "current username", "answer": "$USER"}, {"question": "current hostname", "answer": "$HOSTNAME"}, {"question": "change bash shell to vi mode", "answer": "set -o vi"}, {"question": "in vi edit mode - previous command", "answer": "k"}, {"question": "in vi edit mode - next command", "answer": "j"}, {"question": "in vi edit mode - beginning of the command", "answer": "0"}, {"question": "in vi edit mode - replace current characters of command", "answer": "R"}, {"question": "in vi edit mode - next to 2nd word", "answer": "2w"}, {"question": "in vi edit mode - previous word", "answer": "b"}, {"question": "in vi edit mode - go to insert mode", "answer": "i"}, {"question": "in vi edit mode - edit current command in vi", "answer": "v"}, {"question": "# foo=bar\n echo '$foo'", "answer": "'$foo'"}, {"question": "# foo=bar\n echo \"$foo\"", "answer": "bar"}, {"question": "# foo=bar\n echo ''$foo''", "answer": "bar"}, {"question": "echo $(( 10 + 5 ))", "answer": "15"}, {"question": "x=1\n echo $(( x++ ))", "answer": "1"}, {"question": "x=2\n echo $(( ++x ))", "answer": "4"}, {"question": "x=4\n echo $(( x-- ))", "answer": "4"}, {"question": "x=2\n echo $(( --x ))", "answer": "1"}, {"question": "x=2\n y=3\n echo $(( x ** y ))", "answer": "8"}, {"question": "grep = grep -G", "answer": "Basic Regular Expression (BRE)"}, {"question": "fgrep = grep -F", "answer": "fixed text, ignoring meta-characters"}, {"question": "egrep = grep -E", "answer": "Extended Regular Expression (ERE)"}, {"question": "rgrep = grep -r", "answer": "recursive"}, {"question": "grep -P", "answer": "Perl Compatible Regular Expressions (PCRE)"}, {"question": "grep -i", "answer": "ignore case"}, {"question": "grep -v", "answer": "invert match"}, {"question": "grep -c", "answer": "count matches"}, {"question": "grep -l", "answer": "list filenames"}, {"question": "grep -L", "answer": "list filenames without matches"}, {"question": "grep -n", "answer": "show line number"}, {"question": " Grep only IP address", "answer": "grep -Eo '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n# or\ngrep -Po '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'"}, {"question": "grep -A 3 'bbo'", "answer": "return also 3 lines after match"}, {"question": "grep -B 3 'bbo'", "answer": "return also 3 lines before match"}, {"question": "grep -C 3 'bbo'", "answer": "return also 3 lines before and after match"}, {"question": "Add >$i to the first line, e.g. to make a bioinformatics FASTA file", "answer": "sed -i '1i>$i' $i"}, {"question": "Grep variable from variable", "answer": "$echo \"$long_str\"|grep -q \"$short_str\"\nif [ $? -eq 0 ]; then echo 'found'; fi\n#grep -q will output 0 if match found\n#remember to add space between []!"}, {"question": "fileA:\na\n b\n c\n. fileB:\nd\n e\n f\n. fileC:\ng\n h\n i\n. Output of awk 'print FILENAME, NR,FNR,$0}' fileA fileB?", "answer": "'# fileA    1    1    a\n''# fileA    2    2    b\n''# fileA    3    3    c\n''# fileB    4    1    d\n''# fileB    5    2    e'"}, {"question": "bc -- Number of decimal digit/ significant figure", "answer": "echo \"scale=2;2/3\" | bc"}, {"question": "bc -- Exponent operator (e.g. 10 to the 2)", "answer": "echo \"10^2\" | bc"}, {"question": "bc -- Using variables (e.g. var=5, pre-decrement)", "answer": "echo \"var=5;--var\"| bc"}, {"question": "Break combine column data into rows", "answer": "# For example, separate the following content:\n# David    cat,dog\n# into\n# David    cat\n# David    dog\n\nawk '{split($2,a,\",\");for(i in a)print $1\"\\t\"a[i]}' file\n\n# Detail here:\u3000http://stackoverflow.com/questions/33408762/bash-turning-single-comma-separated-column-into-multi-line-string"}, {"question": "Sort a row (e.g. 1 40  35  12  23  --> 1 12    23  35  40)", "answer": "awk ' {split( $0, a, \"\\t\" ); asort( a ); for( i = 1; i <= length(a); i++ ) printf( \"%s\\t\", a[i] ); printf( \"\\n\" ); }'"}, {"question": "Show limits on command-line length", "answer": "xargs --show-limits\n# Output from my Ubuntu:\n# Your environment variables take up 3653 bytes\n# POSIX upper limit on argument length (this system): 2091451\n# POSIX smallest allowable upper limit on argument length (all systems): 4096\n# Maximum length of command we could actually use: 2087798\n# Size of command buffer we are actually using: 131072\n# Maximum parallelism (--max-procs must be no greater): 2147483647"}, {"question": "Move files to folder", "answer": "find . -name \"*.bak\" -print 0|xargs -0 -I {} mv {} ~/old\n\n# or\nfind . -name \"*.bak\" -print 0|xargs -0 -I file mv file ~/old"}, {"question": "Copy all files from A to B", "answer": "find /dir/to/A -type f -name \"*.py\" -print 0| xargs -0 -r -I file cp -v -p file --target-directory=/path/to/B\n\n# v: verbose|\n# p: keep detail (e.g. owner)"}, {"question": "Count files within directories", "answer": "echo mso{1..8}|xargs -n1 bash -c 'echo -n \"$1:\"; ls -la \"$1\"| grep -w 74 |wc -l' --\n# \"--\" signals the end of options and display further option processing"}, {"question": "Edit all files under current directory (e.g. replace 'www' with 'ww')", "answer": "find . -name '*.php' -exec sed -i 's/www/w/g' {} \\;\n\n# if there are no subdirectory\nreplace \"www\" \"w\" -- *\n# a space before *"}, {"question": "If statement", "answer": "# if and else loop for string matching\nif [[ \"$c\" == \"read\" ]]; then outputdir=\"seq\"; else outputdir=\"write\" ; fi\n\n# Test if myfile contains the string 'test':\nif grep -q hello myfile; then echo -e \"file contains the string!\" ; fi\n\n# Test if mydir is a directory, change to it and do other stuff:\nif cd mydir; then\n  echo 'some content' >myfile\nelse\n  echo >&2 \"Fatal error. This script requires mydir.\"\nfi\n\n# if variable is null\nif [ ! -s \"myvariable\" ]; then echo -e \"variable is null!\" ; fi\n#True of the length if \"STRING\" is zero.\n\n# Using test command (same as []), to test if the length of variable is nonzero\ntest -n \"$myvariable\" && echo myvariable is \"$myvariable\" || echo myvariable is not set\n\n# Test if file exist\nif [ -e 'filename' ]\nthen\n  echo -e \"file exists!\"\nfi\n\n# Test if file exist but also including symbolic links:\nif [ -e myfile ] || [ -L myfile ]\nthen\n  echo -e \"file exists!\"\nfi\n\n# Test if the value of x is greater or equal than 5\nif [ \"$x\" -ge 5 ]; then echo -e \"greater or equal than 5!\" ; fi\n\n# Test if the value of x is greater or equal than 5, in bash/ksh/zsh:\nif ((x >= 5)); then echo -e \"greater or equal than 5!\" ; fi\n\n# Use (( )) for arithmetic operation\nif ((j==u+2)); then echo -e \"j==u+2!!\" ; fi\n\n# Use [[ ]] for comparison\nif [[ $age -gt 21 ]]; then echo -e \"forever 21!!\" ; fi"}, {"question": "For loop", "answer": "# Echo the file name under the current directory\nfor i in $(ls); do echo file $i; done\n#or\nfor i in *; do echo file $i; done\n\n# Make directories listed in a file (e.g. myfile)\nfor dir in $(<myfile); do mkdir $dir; done\n\n# Press any key to continue each loop\nfor i in $(cat tpc_stats_0925.log |grep failed|grep -o '\\query\\w\\{1,2\\}'); do cat ${i}.log; read -rsp $'Press any key to continue...\\n' -n1 key; done\n\n# Print a file line by line when a key is pressed,\noifs=\"$IFS\"; IFS=$'\\n'; for line in $(cat myfile); do ...; done\nwhile read -r line; do ...; done <myfile\n\n#If only one word a line, simply\nfor line in $(cat myfile); do echo $line; read -n1; done\n\n#Loop through an array\nfor i in \"${arrayName[@]}\"; do echo $i; done"}, {"question": "While loop,", "answer": "# Column subtraction of a file (e.g. a 3 columns file)\nwhile read a b c; do echo $(($c-$b)); done < <(head filename)\n#there is a space between the two '<'s\n\n# Sum up column subtraction\ni=0; while read a b c; do ((i+=$c-$b)); echo $i; done < <(head filename)\n\n# Keep checking a running process (e.g. perl) and start another new process (e.g. python) immediately after it. (BETTER use the wait command! Ctrl+F 'wait')\nwhile [[ $(pidof perl) ]]; do echo f; sleep 10; done && python timetorunpython.py"}, {"question": "switch (case in bash)", "answer": "read type;\ncase $type in\n  '0')\n    echo 'how'\n    ;;\n  '1')\n    echo 'are'\n    ;;\n  '2')\n    echo 'you'\n    ;;\nesac"}, {"question": "Print date with formatting", "answer": "date +%F\n# 2020-07-19\n\n# or\ndate +'%d-%b-%Y-%H:%M:%S'\n# 10-Apr-2020-21:54:40\n\n# Returns the current time with nanoseconds.\ndate +\"%T.%N\"\n# 11:42:18.664217000  \n\n# Get the seconds since epoch (Jan 1 1970) for a given date (e.g Mar 16 2021)\ndate -d \"Mar 16 2021\" +%s\n# 1615852800\n# or\ndate -d \"Tue Mar 16 00:00:00 UTC 2021\"  +%s\n# 1615852800  \n\n# Convert the number of seconds since epoch back to date\ndate --date @1615852800\n# Tue Mar 16 00:00:00 UTC 2021"}, {"question": "Print current time point for N days ago or N days after", "answer": "# print current date first (for the following example)\ndate +\"%F %H:%M:%S\"\n# 2023-03-11 16:17:09\n\n# print the time that is 1 day ago\ndate -d\"1 day ago\" +\"%F %H:%M:%S\"\n# 2023-03-10 16:17:09\n\n# print the time that is 7 days ago\ndate -d\"7 days ago\" +\"%F %H:%M:%S\"\n# 2023-03-04 16:17:09\n\n# print the time that is a week ago\ndate -d\"1 week ago\" +\"%F %H:%M:%S\"\n# 2023-03-04 16:17:09\n\n# add 1 day to date\ndate -d\"-1 day ago\" +\"%F %H:%M:%S\"\n# 2023-03-12 16:17:09"}, {"question": "Set when you want to run a command (e.g 1 min from now)", "answer": "at now + 1min  #time-units can be minutes, hours, days, or weeks\nwarning: commands will be executed using /bin/sh\nat> echo hihigithub >~/itworks\nat> <EOT>   # press Ctrl + D to exit\njob 1 at Wed Apr 18 11:16:00 2018"}, {"question": "Download the content of this README.md (the one your are viewing now)", "answer": "curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc -f markdown -t man | man -l -\n\n# or w3m (a text based web browser and pager)\ncurl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc | w3m -T text/html\n\n# or using emacs (in emac text editor)\nemacs --eval '(org-mode)' --insert <(curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc -t org)\n\n# or using emacs (on terminal, exit using Ctrl + x then Ctrl + c)\nemacs -nw --eval '(org-mode)' --insert <(curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc -t org)"}, {"question": "Download all from a page", "answer": "wget -r -l1 -H -t1 -nd -N -np -A mp3 -e robots=off http://example.com\n\n# -r: recursive and download all links on page\n# -l1: only one level link\n# -H: span host, visit other hosts\n# -t1: numbers of retries\n# -nd: don't make new directories, download to here\n# -N: turn on timestamp\n# -nd: no parent\n# -A: type (separate by ,)\n# -e robots=off: ignore the robots.txt file which stop wget from crashing the site, sorry example.com"}, {"question": "Upload a file to web and download (https://transfer.sh/)", "answer": "#  Upload a file (e.g. filename.txt):\ncurl --upload-file ./filename.txt https://transfer.sh/filename.txt\n# the above command will return a URL, e.g: https://transfer.sh/tG8rM/filename.txt\n\n# Next you can download it by:\ncurl https://transfer.sh/tG8rM/filename.txt -o filename.txt"}, {"question": "Download file if necessary", "answer": "data=file.txt\nurl=http://www.example.com/$data\nif [ ! -s $data ];then\n    echo \"downloading test data...\"\n    wget $url\nfi"}, {"question": "Random generate password (e.g. generate 5 password each of length 13)", "answer": "sudo apt install pwgen\npwgen 13 5\n#sahcahS9dah4a xieXaiJaey7xa UuMeo0ma7eic9 Ahpah9see3zai acerae7Huigh7"}, {"question": "Enable X11 forwarding,in order to use graphical application on servers", "answer": "ssh -X user_name@ip_address\n\n# or setting through xhost\n# --> Install the following for Centos:\n# xorg-x11-xauth\n# xorg-x11-fonts-*\n# xorg-x11-utils"}, {"question": "Work with yum history", "answer": "1. ssh -X user_name@ip_address\n2. apt-get install libxss1 libappindicator1 libindicator7\n3. wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n4. sudo apt-get install -f\n5. dpkg -i google-chrome*.deb\n6. google-chrome\n ```\n\n\n## System\n[[back to top](#handy-bash-one-liners)]"}, {"question": "Remove unnecessary files to clean your server", "answer": "sudo apt-get autoremove\nsudo apt-get clean\nsudo rm -rf ~/.cache/thumbnails/*\n\n# Remove old kernal:\nsudo dpkg --list 'linux-image*'\nsudo apt-get remove linux-image-OLDER_VERSION"}, {"question": "Increase/ resize root partition (root partition is an LVM logical volume)", "answer": "pvscan\nlvextend -L +130G /dev/rhel/root -r\n# Adding -r will grow filesystem after resizing the volume."}, {"question": "Create a ssh tunnel", "answer": "ssh -f -L 9000:targetservername:8088 root@192.168.14.72 -N\n#-f: run in background; -L: Listen; -N: do nothing\n#the 9000 of your computer is now connected to the 8088 port of the targetservername through 192.168.14.72\n#so that you can see the content of targetservername:8088 by entering localhost:9000 from your browser."}, {"question": "Get process ID of a process (e.g. sublime_text)", "answer": "#pidof\npidof sublime_text\n\n#pgrep, you don't have to type the whole program name\npgrep sublim\n\n#pgrep, echo 1 if process found, echo 0 if no such process\npgrep -q sublime_text && echo 1 || echo 0\n\n#top, takes longer time\ntop|grep sublime_text"}, {"question": "Performance monitoring tool - sar", "answer": "# installation\n# It collects the data every 10 minutes and generate its report daily. crontab file (/etc/cron.d/sysstat) is responsible for collecting and generating reports.\nyum install sysstat\nsystemctl start sysstat\nsystemctl enable sysstat\n\n# show CPU utilization 5 times every 2 seconds.\nsar 2 5\n\n# show memory  utilization 5 times every 2 seconds.\nsar -r 2 5\n\n# show paging statistics 5 times every 2 seconds.\nsar -B 2 5\n\n# To generate all network statistic:\nsar -n ALL\n\n# reading SAR log file using -f\nsar -f /var/log/sa/sa31|tail"}, {"question": "Reading from journal file", "answer": "journalctl --file ./log/journal/a90c18f62af546ccba02fa3734f00a04/system.journal  --since \"2020-02-11 00:00:00\""}, {"question": "Collect and summarize all hardware info of your machine", "answer": "lshw -json >report.json\n# Other options are: [ -html ]  [ -short ]  [ -xml ]  [ -json ]  [ -businfo ]  [ -sanitize ] ,etc"}, {"question": "Print detail of CPU hardware", "answer": "dmidecode -t 4\n#          Type   Information\n#          0   BIOS\n#          1   System\n#          2   Base Board\n#          3   Chassis\n#          4   Processor\n#          5   Memory Controller\n#          6   Memory Module\n#          7   Cache\n#          8   Port Connector\n#          9   System Slots\n#         11   OEM Strings\n#         13   BIOS Language\n#         15   System Event Log\n#         16   Physical Memory Array\n#         17   Memory Device\n#         18   32-bit Memory Error\n#         19   Memory Array Mapped Address\n#         20   Memory Device Mapped Address\n#         21   Built-in Pointing Device\n#         22   Portable Battery\n#         23   System Reset\n#         24   Hardware Security\n#         25   System Power Controls\n#         26   Voltage Probe\n#         27   Cooling Device\n#         28   Temperature Probe\n#         29   Electrical Current Probe\n#         30   Out-of-band Remote Access\n#         31   Boot Integrity Services\n#         32   System Boot\n#         34   Management Device\n#         35   Management Device Component\n#         36   Management Device Threshold Data\n#         37   Memory Channel\n#         38   IPMI Device\n#         39   Power Supply"}, {"question": "Print detail of all hard disks", "answer": "lsblk -io KNAME,TYPE,MODEL,VENDOR,SIZE,ROTA\n#where ROTA means rotational device / spinning hard disks (1 if true, 0 if false)"}, {"question": "Linux modules", "answer": "# Show the status of modules in the Linux Kernel\nlsmod\n\n# Add and remove modules from the Linux Kernel\nmodprobe\n\n# or\n# Remove a module\nrmmod\n\n# Insert a module\ninsmod"}, {"question": "Controlling IPMI-enabled devices (e.g. BMC)", "answer": "# Remotely finding out power status of the server\nipmitool -U <bmc_username> -P <bmc_password> -I lanplus -H <bmc_ip_address> power status\n\n# Remotely switching on server\nipmitool -U <bmc_username> -P <bmc_password> -I lanplus -H <bmc_ip_address> power on\n\n# Turn on panel identify light (default 15s)\nipmitool chassis identify 255\n\n# Found out server sensor temperature\nipmitool sensors |grep -i Temp\n\n# Reset BMC\nipmitool bmc reset cold\n\n# Prnt BMC network\nipmitool lan print 1\n\n# Setting BMC network\nipmitool -I bmc lan set 1 ipaddr 192.168.0.55\nipmitool -I bmc lan set 1 netmask 255.255.255.0\nipmitool -I bmc lan set 1 defgw ipaddr 192.168.0.1"}, {"question": "Check connection to host (e.g. check connection to port 80 and 22 of google.com)", "answer": "nc -vw5 google.com 80\n# Connection to google.com 80 port [tcp/http] succeeded!\n\nnc -vw5 google.com 22\n# nc: connect to google.com port 22 (tcp) timed out: Operation now in progress\n# nc: connect to google.com port 22 (tcp) failed: Network is unreachable"}, {"question": "Nc as a chat tool!", "answer": "# From server A:\n$ sudo nc -l 80\n# then you can connect to the 80 port from another server (e.g. server B):\n# e.g. telnet <server A IP address> 80\n# then type something in server B\n# and you will see the result in server A!"}, {"question": "Check which ports are listening for TCP connections from the network", "answer": "#notice that some companies might not like you using nmap\nnmap -sT -O localhost\n\n# check port 0-65535\nnmap  -p0-65535 localhost"}, {"question": "Check if a host is up and scan for open ports, also skip host discovery.", "answer": "#skips checking if the host is alive which may sometimes cause a false positive and stop the scan.\n$ nmap google.com -Pn\n\n# Example output:\n# Starting Nmap 7.01 ( https://nmap.org ) at 2020-07-18 22:59 CST\n# Nmap scan report for google.com (172.217.24.14)\n# Host is up (0.013s latency).\n# Other addresses for google.com (not scanned): 2404:6800:4008:802::200e\n# rDNS record for 172.217.24.14: tsa01s07-in-f14.1e100.net\n# Not shown: 998 filtered ports\n# PORT    STATE SERVICE\n# 80/tcp  open  http\n# 443/tcp open  https\n#\n# Nmap done: 1 IP address (1 host up) scanned in 3.99 seconds"}, {"question": "Scan for open ports and OS and version detection (e.g. scan the domain \"scanme.nmap.org\")", "answer": "$ nmap -A -T4 scanme.nmap.org\n# -A to enable OS and version detection, script scanning, and traceroute; -T4 for faster execution"}, {"question": "Persisting network configuration changes", "answer": "sudo vi /etc/sysconfig/network-scripts/ifcfg-enoxxx\n# then edit the fields: BOOTPROT, DEVICE, IPADDR, NETMASK, GATEWAY, DNS1 etc"}, {"question": "Find out the web server (e.g Nginx or Apache) of a website", "answer": "curl -I http://example.com/\n# HTTP/1.1 200 OK\n# Server: nginx\n# Date: Thu, 02 Jan 2020 07:01:07 GMT\n# Content-Type: text/html\n# Content-Length: 1119\n# Connection: keep-alive\n# Vary: Accept-Encoding\n# Last-Modified: Mon, 09 Sep 2019 10:37:49 GMT\n# ETag: \"xxxxxx\"\n# Accept-Ranges: bytes\n# Vary: Accept-Encoding"}, {"question": "Perform network throughput tests", "answer": "# server side:\n$ sudo iperf -s -p 80\n\n# client side:\niperf -c <server IP address> --parallel 2 -i 1 -t 2 -p 80"}, {"question": "To block port 80 (HTTP server) using iptables.", "answer": "sudo iptables -A INPUT -p tcp --dport 80 -j DROP\n\n# only block connection from an IP address\nsudo iptables \u2013A INPUT \u2013s <IP> -p tcp \u2013dport 80 \u2013j DROP"}, {"question": "Print some words that start with a particular string (e.g. words start with 'phy')", "answer": "# If file is not specified, the file /usr/share/dict/words is used.\nlook phy|head -n 10\n# phycic\n# Phyciodes\n# phycite\n# Phycitidae\n# phycitol\n# phyco-\n# phycochrom\n# phycochromaceae\n# phycochromaceous\n# phycochrome"}, {"question": "Compare two files (e.g. fileA, fileB)", "answer": "diff fileA fileB\n# a: added; d:delete; c:changed\n\n# or\nsdiff fileA fileB\n# side-to-side merge of file differences"}, {"question": "Find common/differing lines", "answer": "# having two sorted and uniqed files (for example after running `$ sort -uo fileA fileA` and same for fileB):\n# ------\n# fileA:\n# ------\n# joey\n# kitten\n# piglet\n# puppy\n# ------\n# fileB:\n# ------\n# calf\n# chick\n# joey\n# puppy\n#\n# Find lines in both files\ncomm -12 fileA fileB\n# joey\n# puppy\n#\n# Find lines in fileB that are NOT in fileA\ncomm -13 fileA fileB\n# calf\n# chick\n#\n# Find lines in fileA that are NOT in fileB\ncomm -23 fileA fileB\n# kitten\n# piglet"}, {"question": "Number a file (e.g. fileA)", "answer": "nl fileA\n\n#or\nnl -nrz fileA\n# add leading zeros\n\n#or\nnl -w1 -s ' '\n# making it simple, blank separate"}, {"question": "Join two files field by field with tab (default join by the first column of both file, and default separator is space)", "answer": "# fileA and fileB should have the same ordering of lines.\njoin -t '\\t' fileA fileB\n\n# Join using specified field (e.g. column 3 of fileA and column 5 of fileB)\njoin -1 3 -2 5 fileA fileB"}, {"question": "Group/combine rows into one row", "answer": "# e.g.\n# AAAA\n# BBBB\n# CCCC\n# DDDD\ncat filename|paste - -\n# AAAABBBB\n# CCCCDDDD\ncat filename|paste - - - -\n# AAAABBBBCCCCDDDD"}, {"question": "Generate all combination (e.g. A,T,C,G)", "answer": "set = {A,T,C,G}\ngroup= 5\nfor ((i=0; i<$group; i++)); do\n    repetition=$set$repetition; done\n    bash -c \"echo \"$repetition\"\""}, {"question": "Split file into smaller file", "answer": "# Split by line (e.g. 1000 lines/smallfile)\nsplit -d -l 1000 largefile.txt\n\n# Split by byte without breaking lines across files\nsplit -C 10 largefile.txt"}, {"question": "Create a large amount of dummy files (e.g 100000 files, 10 bytes each):", "answer": "#1. Create a big file\ndd if=/dev/zero of=bigfile bs=1 count=1000000\n\n#2. Split the big file to 100000 10-bytes files\n split -b 10 -a 10 bigfile"}, {"question": "Add file extension to all file(e.g add .txt)", "answer": "rename s/$/.txt/ *\n# You can use rename -n s/$/.txt/ * to check the result first, it will only print sth like this:\n# rename(a, a.txt)\n# rename(b, b.txt)\n# rename(c, c.txt)"}, {"question": "Create or replace a file with contents", "answer": "cat >myfile\nlet me add sth here\n# exit with ctrl+d\n\n# or using tee\ntee myfile\nlet me add sth else here\n# exit with ctrl+d"}, {"question": "Append to a file with contents", "answer": "cat >>myfile\nlet me add sth here\n# exit with ctrl+d\n\n# or using tee\ntee -a myfile\nlet me add sth else here\n# exit with ctrl+d"}, {"question": "Working with json data", "answer": "#install the useful jq package\n#sudo apt-get install jq\n#e.g. to get all the values of the 'url' key, simply pipe the json to the following jq command(you can use .[]. to select inner json, i.e jq '.[].url')\ncat file.json | jq '.url'"}, {"question": "Decimal to Binary (e.g get binary of 5)", "answer": "D2B=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})\necho -e ${D2B[5]}\n#00000101\necho -e ${D2B[255]}\n#11111111"}, {"question": "Bash auto-complete (e.g. show options \"now tomorrow never\" when you press'tab' after typing \"dothis\")", "answer": "complete -W \"now tomorrow never\" dothis\n# ~$ dothis  \n# never     now       tomorrow\n# press 'tab' again to auto-complete after typing 'n' or 't'"}, {"question": "Displays a calendar", "answer": "# print the current month, today will be highlighted.\ncal\n# October 2019      \n# Su Mo Tu We Th Fr Sa  \n#    1  2  3  4  5  \n# 6  7  8  9 10 11 12  \n# 13 14 15 16 17 18 19  \n# 20 21 22 23 24 25 26  \n# 27 28 29 30 31  \n\n# only display November\ncal -m 11"}, {"question": "Run command in background, output error file", "answer": "some_commands  &>log &\n\n# or\nsome_commands 2>log &\n\n# or\nsome_commands 2>&1| tee logfile\n\n# or\nsome_commands |& tee logfile\n\n# or\nsome_commands 2>&1 >>outfile\n#0: standard input; 1: standard output; 2: standard error"}, {"question": "Send mail", "answer": "echo 'heres the content'| mail -a /path/to/attach_file.txt -s 'mail.subject' me@gmail.com\n# use -a flag to set send from (-a \"From: some@mail.tld\")"}, {"question": "Interacting with history", "answer": "# list 5 previous command (similar to `history |tail -n 5` but wont print the history command itself)\nfc -l -5"}, {"question": "Backup with rsync", "answer": "rsync -av filename filename.bak\nrsync -av directory directory.bak\nrsync -av --ignore_existing directory/ directory.bak\nrsync -av --update directory directory.bak\n\nrsync -av directory user@ip_address:/path/to/directory.bak\n# skip files that are newer on receiver (i prefer this one!)"}, {"question": "Make all directories at one time!", "answer": "mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat}\n# -p: make parent directory\n# this will create:\n# project/\n# project/bin/\n# project/demo/\n# project/demo/stat/\n# project/doc/\n# project/doc/html/\n# project/doc/info/\n# project/doc/pdf/\n# project/lib/\n# project/lib/ext/\n# project/src/\n#\n# project/\n# \u251c\u2500\u2500 bin\n# \u251c\u2500\u2500 demo\n# \u2502   \u2514\u2500\u2500 stat\n# \u251c\u2500\u2500 doc\n# \u2502   \u251c\u2500\u2500 html\n# \u2502   \u251c\u2500\u2500 info\n# \u2502   \u2514\u2500\u2500 pdf\n# \u251c\u2500\u2500 lib\n# \u2502   \u2514\u2500\u2500 ext\n# \u2514\u2500\u2500 src"}, {"question": "Fork bomb", "answer": "# Don't try this at home!\n# It is a function that calls itself twice every call until you run out of system resources.\n# A '# ' is added in front for safety reason, remove it when seriously you are testing it.\n# :(){:|:&};:"}, {"question": "Zip the content of a directory without including the directory itself", "answer": "# First cd to the directory, they run:\nzip -r -D ../myzipfile .\n# you will see the myzipfile.zip in the parent directory (cd ..)"}, {"question": "Output a y/n repeatedly until killed", "answer": "# 'y':\nyes\n\n# or 'n':\nyes n\n\n# or 'anything':\nyes anything\n\n# pipe yes to other command\nyes | rm -r large_directory"}, {"question": "Create dummy file of certain size (e.g. 200mb)", "answer": "dd if=/dev/zero of=/dev/shm/200m bs=1024k count=200\n# or\ndd if=/dev/zero of=/dev/shm/200m bs=1M count=200\n\n# Standard output:\n# 200+0 records in\n# 200+0 records out\n# 209715200 bytes (210 MB) copied, 0.0955679 s, 2.2 GB/s"}, {"question": "Use Bash Strict Mode", "answer": "# These options can make your code safer but, depending on how your pipeline is written, it might be too aggressive \n# or it might not catch the errors that you are interested in\n\n# for reference see https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425\n#               and https://mywiki.wooledge.org/BashPitfalls#set_-euo_pipefail\n\nset -o errexit      # exit immediately if a pipeline returns a non-zero status\nset -o errtrace     # trap ERR from shell functions, command substitutions, and commands from subshell\nset -o nounset      # treat unset variables as an error\nset -o pipefail     # pipe will exit with last non-zero status, if applicable\nset -Eue -o pipefail  # shorthand for above (pipefail has no short option)"}, {"question": "Run sql-like command on files from terminal", "answer": "# download:\n# https://github.com/harelba/q\n# example:\nq -d \",\" \"select c3,c4,c5 from /path/to/file.txt where c3='foo' and c5='boo'\""}, {"question": "Using Screen for multiple terminal sessions", "answer": "# Create session and attach:\nscreen\n\n# Create a screen and name it 'test'\nscreen -S test\n\n# Create detached session foo:\nscreen -S foo -d -m\n\n# Detached session foo:\nscreen: ^a^d\n\n# List sessions:\nscreen -ls\n\n# Attach last session:\nscreen -r\n\n# Attach to session foo:\nscreen -r foo\n\n# Kill session foo:\nscreen -r foo -X quit\n\n\n# Scroll:\n# Hit your screen prefix combination (C-a / control+A), then hit Escape.\n# Move up/down with the arrow keys (\u2191 and \u2193).  \n\n# Redirect output of an already running process in Screen:\n# (C-a / control+A), then hit 'H'  \n\n# Store screen output for Screen:\n# Ctrl+A, Shift+H  \n# You will then find a screen.log file under current directory.  "}, {"question": "Using Tmux for multiple terminal sessions", "answer": "# Create session and attach:\ntmux\n\n# Attach to session foo:\ntmux attach -t foo\n\n# Detached session foo:\n^bd\n\n# List sessions:\ntmux ls\n\n# Attach last session:\ntmux attach\n\n# Kill session foo:\ntmux kill-session -t foo\n\n# Create detached session foo:\ntmux new -s foo -d\n\n# Send command to all panes in tmux:\nCtrl-B\n:setw synchronize-panes\n\n# Some tmux pane control commands:\nCtrl-B\n#   Panes (splits), Press Ctrl+B, then input the following symbol:\n#   %  horizontal split\n#   \"  vertical split\n#   o  swap panes\n#   q  show pane numbers\n#   x  kill pane\n#   space - toggle between layouts\n\n#   Distribute Vertically (rows):\nselect-layout even-vertical\n#   or\nCtrl+b, Alt+2\n\n# Distribute horizontally (columns):\nselect-layout even-horizontal\n#   or\nCtrl+b, Alt+1\n\n# Scroll\nCtrl-b then \\[ then you can use your normal navigation keys to scroll around.\nPress q to quit scroll mode."}, {"question": "Wait for a pid (job) to complete", "answer": "wait %1\n# or\nwait $PID\nwait ${!}\n#wait ${!} to wait till the last background process ($! is the PID of the last background process)"}, {"question": "Capture/record/save terminal output (capture everything you type and output)", "answer": "script output.txt\n# start using terminal\n# to logout the screen session (stop saving the contents), type exit."}, {"question": "List contents of directories in a tree-like format.", "answer": "tree\n# go to the directory you want to list, and type tree (sudo apt-get install tree)\n# output:\n# home/\n# \u2514\u2500\u2500 project\n#     \u251c\u2500\u2500 1\n#     \u251c\u2500\u2500 2\n#     \u251c\u2500\u2500 3\n#     \u251c\u2500\u2500 4\n#     \u2514\u2500\u2500 5\n#\n\n# set level directories deep (e.g. level 1)\ntree -L 1\n# home/\n# \u2514\u2500\u2500 project"}, {"question": "Set up virtualenv(sandbox) for python", "answer": "# 1. install virtualenv.\nsudo apt-get install virtualenv\n# 2. Create a directory (name it .venv or whatever name your want) for your new shiny isolated environment.\nvirtualenv .venv\n# 3. source virtual bin\nsource .venv/bin/activate\n# 4. you can check check if you are now inside a sandbox.\ntype pip\n# 5. Now you can install your pip package, here requirements.txt is simply a txt file containing all the packages you want. (e.g tornado==4.5.3).\npip install -r requirements.txt\n# 6. Exit virtual environment\ndeactivate"}]